# clang-format 21.1.2
# vim: ft=yaml

BasedOnStyle: LLVM
AccessModifierOffset: -4
AlignAfterOpenBracket: Align
AlignArrayOfStructures: None
AlignConsecutiveAssignments: None
AlignConsecutiveBitFields: Consecutive
AlignConsecutiveDeclarations: None
AlignConsecutiveMacros: Consecutive
AlignConsecutiveShortCaseStatements:
  Enabled: false
AlignEscapedNewlines: LeftWithLastLine
AlignOperands: Align
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0
AllowAllArgumentsOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowBreakBeforeNoexceptSpecifier: Always

# As of v21.1.0, setting this to an option besides `Never` may prevent braces
# from wrapping before an else block if `AllowShortIfStatementsOnASingleLine`
# is set to `AllIfsAndElse` despite `BreakBeforeBraces` being set to `Custom`
# and `BraceWrapping.BeforeElse` set to true
AllowShortBlocksOnASingleLine: Never

AllowShortCaseLabelsOnASingleLine: true
AllowShortCompoundRequirementOnASingleLine: true
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: InlineOnly
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: true
AllowShortNamespacesOnASingleLine: false
AlwaysBreakBeforeMultilineStrings: false
AttributeMacros: []
BinPackArguments: true
BinPackLongBracedList: false
BinPackParameters: true
BitFieldColonSpacing: Both
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: false
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: false
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
# BracedInitializerIndentWidth:
BreakAdjacentStringLiterals: true
BreakAfterAttributes: Leave
BreakAfterReturnType: None
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Custom
BreakBeforeConceptDeclarations: Always
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTemplateCloser: true
BreakBeforeTernaryOperators: false
BreakBinaryOperations: Never
BreakConstructorInitializers: AfterColon
BreakFunctionDefinitionParameters: false
BreakInheritanceList: AfterComma
BreakStringLiterals: true
BreakTemplateDeclarations: Yes
ColumnLimit: 80
# CommentPragmas:
CompactNamespaces: true
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DerivePointerAlignment: false
DisableFormat: false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: Leave
EnumTrailingComma: Leave # Warning
FixNamespaceComments: true
ForEachMacros: []
IfMacros: []
IncludeBlocks: Regroup
IncludeCategories:
  - Regex: "<.*/.*>"
    Priority: 2
  - Regex: "<.*>"
    Priority: 3
  - Regex: ".*"
    Priority: 1
# IncludeIsMainRegex:
# IncludeIsMainSourceRegex:
IndentAccessModifiers: false
IndentCaseBlocks: false
IndentCaseLabels: true
IndentExportBlock: false
IndentExternBlock: NoIndent
IndentGotoLabels: false
IndentPPDirectives: AfterHash
IndentRequiresClause: true
IndentWidth: 4
IndentWrappedFunctionNames: false
InsertBraces: false # Warning
InsertNewlineAtEOF: true
IntegerLiteralSeparator:
  Binary: 4
  BinaryMinDigits: 0
  Decimal: 3
  DecimalMinDigits: 6
  Hex: 0
  HexMinDigits: 0
KeepEmptyLines:
  AtEndOfFile: false
  AtStartOfBlock: false
  AtStartOfFile: false
KeepFormFeed: false
LambdaBodyIndentation: Signature
# Language: # Not set so that this config is applied to all languages
LineEnding: LF
# MacroBlockBegin:
# MacroBlockEnd:
Macros: []
MacrosSkippedByRemoveParentheses: []
MainIncludeChar: Quote
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
NamespaceMacros: []
# OneLineFormatOffRegex:
PPIndentWidth: -1
PackConstructorInitializers: BinPack
# PenaltyBreakAssignment:
# PenaltyBreakBeforeFirstCallParameter:
# PenaltyBreakBeforeMemberAccess:
# PenaltyBreakComment:
# PenaltyBreakFirstLessLess:
# PenaltyBreakOpenParenthesis:
# PenaltyBreakScopeResolution:
# PenaltyBreakString:
# PenaltyBreakTemplateDeclaration:
# PenaltyExcessCharacter:
# PenaltyIndentedWhitespace:
# PenaltyReturnTypeOnItsOwnLine:
PointerAlignment: Left
QualifierAlignment: Custom # Warning
QualifierOrder:
  [
    "inline",
    "static",
    "friend",
    "constexpr",
    "const",
    "volatile",
    "restrict",
    "type",
  ]
RawStringFormats: []
ReferenceAlignment: Pointer
ReflowComments: Always
RemoveBracesLLVM: false # Warning
RemoveEmptyLinesInUnwrappedLines: true
RemoveParentheses: MultipleParentheses # Warning
RemoveSemicolon: true # Warning
RequiresClausePosition: WithPreceding
RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1
SkipMacroDefinitionBody: false
SortIncludes: CaseSensitive
SortUsingDeclarations: Lexicographic
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterOperatorKeyword: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: false
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: false
  AfterNot: true
  AfterOverloadedOperator: false
  AfterPlacementOperator: true
  AfterRequiresInClause: true
  AfterRequiresInExpression: true
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: Never
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParens: Never
SpacesInSquareBrackets: false
Standard: Auto
StatementAttributeLikeMacros: []
StatementMacros: []
TabWidth: 4
TemplateNames: []
TypeNames: []
TypenameMacros: []
UseTab: Never
VariableTemplates: []
WhitespaceSensitiveMacros: []
WrapNamespaceBodyWithEmptyLines: Always
